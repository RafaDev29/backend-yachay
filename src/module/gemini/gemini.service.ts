import { Injectable, Logger } from '@nestjs/common';
import { GoogleGenerativeAI } from '@google/generative-ai';

export interface QuestionGenerationRequest {
  topic: string;
  description: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  questionCount: number;
  questionTypes: ('multiple_choice' | 'true_false' | 'fill_blank')[];
  language?: string;
}

export interface GeneratedQuestion {
  question: string;
  type: string;
  options?: string[];
  correctAnswer: string;
  explanation?: string;
  difficulty: string;
}

@Injectable()
export class GeminiService {
  private readonly logger = new Logger(GeminiService.name);
  private genAI: GoogleGenerativeAI;
  private model: any;

  constructor() {
    const apiKey = process.env.GEMINI_API_KEY;
    this.genAI = new GoogleGenerativeAI(apiKey ? apiKey : "");
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });
  }

  async generateQuestions(request: QuestionGenerationRequest): Promise<GeneratedQuestion[]> {
    try {
      const prompt = this.buildQuestionPrompt(request);
      const result = await this.model.generateContent(prompt);

      const response = await result.response;
      const text = response.text();

      return this.parseQuestionsFromResponse(text);
    } catch (error) {
      this.logger.error('Error generating questions with Gemini:', error);
      throw new Error('Failed to generate questions');
    }
  }

  async generateLearningPath(topic: string, userLevel: string): Promise<string[]> {
    const prompt = `
    Como experto en educaci칩n y dise침o curricular, crea una ruta de aprendizaje progresiva para el tema: "${topic}".
    
    Nivel del usuario: ${userLevel}
    
    Proporciona una lista de 5-8 subtemas ordenados desde lo m치s b치sico hasta lo m치s avanzado.
    Cada subtema debe ser espec칤fico y alcanzable.
    
    Formato de respuesta:
    1. [Subtema b치sico]
    2. [Siguiente nivel]
    ...
    
    Responde 칰nicamente con la lista numerada, sin explicaciones adicionales.
    `;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      return text.split('\n').filter(line => line.trim().match(/^\d+\./)).map(line =>
        line.replace(/^\d+\.\s*/, '').trim()
      );
    } catch (error) {
      this.logger.error('Error generating learning path:', error);
      throw new Error('Failed to generate learning path');
    }
  }

  async generateModuleDescription(moduleName: string, topics: string[]): Promise<string> {
    const prompt = `
    Crea una descripci칩n atractiva y motivadora para un m칩dulo educativo llamado "${moduleName}".
    
    El m칩dulo incluye estos temas: ${topics.join(', ')}
    
    La descripci칩n debe:
    - Ser emocionante y gamificada (estilo YACHAY)
    - Explicar qu칠 aprender치 el usuario
    - Usar emojis relevantes
    - Tener entre 100-150 palabras
    - Motivar al usuario a comenzar
    
    Responde 칰nicamente con la descripci칩n, sin t칤tulos adicionales.
    `;

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      return response.text().trim();
    } catch (error) {
      this.logger.error('Error generating module description:', error);
      throw new Error('Failed to generate module description');
    }
  }

  private buildQuestionPrompt(request: QuestionGenerationRequest): string {
    const questionTypesText = request.questionTypes.map(type => {
      switch (type) {
        case 'multiple_choice': return 'opci칩n m칰ltiple (4 opciones)';
        case 'true_false': return 'verdadero/falso';
        case 'fill_blank': return 'completar espacios en blanco';
        default: return type;
      }
    }).join(', ');

    // Construir la secci칩n de enfoque espec칤fico si hay descripci칩n
    const specificFocusSection = request.description && request.description.trim()
      ? `\n游늶 ENFOQUE ESPEC칈FICO REQUERIDO POR EL ESTUDIANTE:
"${request.description.trim()}"

IMPORTANTE: Las preguntas deben estar especialmente orientadas hacia estos aspectos mencionados por el estudiante. Prioriza estos elementos espec칤ficos al crear las preguntas.`
      : '';

    return `
Eres un experto creador de contenido educativo para YACHAY, una plataforma gamificada de aprendizaje personalizado.

Crea exactamente ${request.questionCount} preguntas sobre el tema: "${request.topic}"
${specificFocusSection}

Especificaciones:
- Nivel de dificultad: ${request.difficulty}
- Tipos de pregunta: ${questionTypesText}
- Idioma: ${request.language || 'espa침ol'}
- Las preguntas deben ser precisas, educativas y divertidas
- Incluye explicaciones breves para cada respuesta correcta
${request.description ? '- PRIORIZA los aspectos espec칤ficos mencionados en el enfoque del estudiante' : ''}

INSTRUCCIONES DE CREACI칍N:
${request.description
        ? `1. Analiza cuidadosamente lo que el estudiante quiere repasar espec칤ficamente
2. Al menos el 70% de las preguntas deben estar directamente relacionadas con su enfoque espec칤fico
3. El resto pueden ser preguntas complementarias del tema general
4. Aseg칰rate de que las preguntas aborden exactamente lo que el estudiante necesita practicar`
        : `1. Crea preguntas que cubran los aspectos m치s importantes del tema
2. Distribuye las preguntas para abarcar diferentes subtemas relevantes
3. Mant칠n un equilibrio entre conceptos fundamentales y aplicaciones pr치cticas`}

Formato de respuesta JSON:
{
  "questions": [
    {
      "question": "Texto de la pregunta",
      "type": "multiple_choice|true_false|fill_blank",
      "options": ["opci칩n1", "opci칩n2", "opci칩n3", "opci칩n4"], // solo para multiple_choice
      "correctAnswer": "respuesta correcta",
      "explanation": "breve explicaci칩n de por qu칠 es correcta",
      "difficulty": "${request.difficulty}",
      "isSpecificFocus": true // true si la pregunta est치 directamente relacionada con el enfoque espec칤fico del estudiante
    }
  ]
}

Distribuye los tipos de pregunta de manera equilibrada. Aseg칰rate de que las preguntas sean desafiantes pero justas para el nivel especificado.

Responde 칔NICAMENTE con el JSON v치lido, sin texto adicional.
    `;
  }

  private parseQuestionsFromResponse(response: string): GeneratedQuestion[] {
    try {
      // Limpiar la respuesta para extraer solo el JSON
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in response');
      }

      const parsed = JSON.parse(jsonMatch[0]);
      return parsed.questions || [];
    } catch (error) {
      this.logger.error('Error parsing questions response:', error);
      this.logger.debug('Raw response:', response);

      // Fallback: intentar parsear manualmente
      return this.fallbackParseQuestions(response);
    }
  }

  private fallbackParseQuestions(response: string): GeneratedQuestion[] {
    // Implementaci칩n de respaldo si el JSON falla
    // Esto es opcional pero recomendado para robustez
    const questions: GeneratedQuestion[] = [];

    // L칩gica simple de parseo como respaldo
    const lines = response.split('\n').filter(line => line.trim());

    // Esta es una implementaci칩n b치sica - puedes mejorarla seg칰n necesites
    return questions;
  }
}